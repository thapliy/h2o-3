package hex.tree.gbm;

import ml.dmlc.xgboost4j.java.Booster;
import ml.dmlc.xgboost4j.java.DMatrix;
import ml.dmlc.xgboost4j.java.XGBoost;
import ml.dmlc.xgboost4j.java.XGBoostError;
import org.junit.BeforeClass;
import org.junit.Test;
import water.*;

import java.util.HashMap;

public class XGBoostTest extends TestUtil {

  @BeforeClass public static void stall() { stall_till_cloudsize(1); }

  static DMatrix[] getMatrices() throws XGBoostError {
    // load file from text file, also binary buffer generated by xgboost4j
    return new DMatrix[]{
       new DMatrix("/home/arno/xgboost/demo/data/agaricus.txt.train"),
       new DMatrix("/home/arno/xgboost/demo/data/agaricus.txt.test")
    };
  }

  @Test
  public void testMatrices() throws XGBoostError { getMatrices(); }

  @Test
  public void BasicModel() throws XGBoostError {
    // load file from text file, also binary buffer generated by xgboost4j
    DMatrix[] mat = getMatrices();
    DMatrix trainMat = mat[0];
    DMatrix testMat = mat[1];

    HashMap<String, Object> params = new HashMap<>();
    params.put("eta", 0.1);
    params.put("max_depth", 5);
    params.put("silent", 0);
    params.put("objective", "binary:logistic");

    HashMap<String, DMatrix> watches = new HashMap<>();
    watches.put("train", trainMat);
    watches.put("test",  testMat);

    Booster booster = XGBoost.train(trainMat, params, 10, watches, null, null);
    float[][] preds = booster.predict(testMat);
  }


}
